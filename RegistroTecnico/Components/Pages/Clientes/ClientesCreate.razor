@page "/Cliente/Create"
@inject ClientesService clienteService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
    <div class="card-header bg-primary text-white text-center">
        <h3><i class="fas fa-user-plus"></i> Registro Cliente</h3>
    </div>

    <div class="card-body">
        <div class="mb-3">
            <label for="clienteId" class="form-label">ID del Cliente:</label>
            <InputNumber @bind-Value="cliente.ClienteId" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre del Cliente:</label>
            <InputText @bind-Value="cliente.Nombres" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="whatsapp" class="form-label">WhatsApp del Cliente:</label>
            <InputText @bind-Value="cliente.WhatsApp" class="form-control" />
        </div>
    </div>

    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo</button>
            <button type="submit" class="btn btn-outline-success ml-2" @onclick="Guardar"><span class="bi bi-check-circle-fill"></span> Guardar</button>
            <a type="button" href="/Clientes/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder</a>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int clienteId { get; set; }

    public Clientes cliente { get; set; } = new Clientes();
    private bool Existe = false;

    public void Nuevo()
    {
        cliente = new Clientes();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var clienteEncontrado = await clienteService.Buscar(cliente.ClienteId);

        if (clienteEncontrado != null)
        {
            cliente = clienteEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await clienteService.Existe(cliente.Nombres);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }

        var guardo = await clienteService.Guardar(cliente);
        if (guardo)
        {
            Nuevo();
            navigationManager.NavigateTo("/Clientes/Index");
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await clienteService.Eliminar(cliente.ClienteId);
        Nuevo();
    }
}